const assert = require('assert');
const fs=require('fs');

function load(path) {
	return fs.readFileSync(path, 'utf8');
}

// 功能：cedict_ts_20200327.u8文件内容转为数组
function convertDictionary(str, arraySliceIndex=0){
	assert.ok(typeof str=='string');
	let res;

	if(str.length>3 && str.indexOf(' ')){
		res=str.split('\n').map(e=>{
			let pair=e.split(/\s+/, 3);
			let [t,s]=pair;
			// if(t.length>1) return [s,t];
			return (t&&(!/^#/.test(t))&&s) ? ([s,t]) :null;
		}).filter(e=>e);

		if(arraySliceIndex!==0) {
			res=res.slice(arraySliceIndex);
		}
	}else{
		res=[];
	}
	return res;
}

function dictionarySort(arr) {
	arr.sort((a,b)=>{
		let al=a[0].length, bl=b[0].length;
		// 长度排序：长的在前
		// 文字排序：charCode小的在前
		return al>bl ? -1 : (al<bl? 1 : (a[0]>b[0]?1:(a[0]<b[0]?-1:0)));
	});
	return arr;
}



function dictionaryFilter(arr) {
	let lastChars = new Set();
	arr = arr.filter(e=>{
		let [a,b]=e;
		let al = a.length;
		let re = /[\x00-\xff]/;// ASCII代码0-255内字节

		if(al>0) {
			if(al===1) {
				if(a===b) {
					if(re.test(a)) return false;
					// 【BUG】单字特殊处理：单字如果有相同的
					lastChars.add(a);
				}
			}
			return true;
		}
		return false;
	});

	let result = [];
	arr.forEach(e=>{
		let [a,b]=e;
		if(!lastChars.has(a)) result.push(e);
	})
	return result;
}


function save(path, cedictArray){
	let mergedText=cedictArray.map(e=>e.join('\t')).join('\n');
	return fs.writeFileSync(path, mergedText, { encoding: 'utf8'});
}


module.exports={
	convertDictionary,
	dictionarySort,
	dictionaryFilter,
	save,
	parse(data, index=0) {
		let arr=convertDictionary(data, index);
		arr = dictionaryFilter(arr);
		return dictionarySort(arr);
	}
}




// !function test(){
// 	let dataStr = fs.readFileSync('D:\\home\\centos\\server\\web\\tm\\update_cedict\\cedicts\\cedict_ts_20200327_temp.u8', 'utf8');
// 	assert.ok(dataStr);

// 	let dataArr = convertDictionary(dataStr);
// 	dictionarySort(dataArr);
// 	dataArr = dictionaryFilter(dataArr);

// 	console.log(dataArr);
// }();

