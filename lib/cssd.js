!function (e) { function t() { } const r = "complete"; function n() { return Date.now().toString(36) + Math.random().toString(36).slice(2) } function o() { return t.title || (t.title = n()), t.title } function l() { let e = document.createElement("style"); return e.setAttribute("title", o()), t.element = e } function u() { let e = o(), r = document.querySelector(`[title="${e}"]`); return r || (r = document.body.appendChild(l())), t.element = r } function i() { let e, r = Array.from(document.styleSheets), n = o(); for (e of r) if (e.title === n) break; return t.sheet = e, e } function c() { return Array.from(document.styleSheets).reduce((e, t) => e.concat(Array.from(t.rules)), []) } function s() { Array.from(document.styleSheets).forEach(e => { e.ownerNode.remove() }) } function a() { let e = c(); s(), u(); let t = i(); e.forEach(e => { let r = e.selectorText, n = e.cssText; n = n.slice(n.indexOf("{") + 1, n.lastIndexOf("}")), t.addRule(r, n) }) } function f() { } function m(e) { let t = i(), r = Array.from(t.rules), n = new f; return r.forEach(t => { if (t.selectorText === e) { Array.from(t.styleMap); Object.assign(n, d(t.cssText)) } }), n } function d(e) { let t = {}; return "string" == typeof e && e.slice(e.indexOf("{") + 1, e.lastIndexOf("}")).split(";").forEach(e => { let [r, n] = e.split(":"); "string" == typeof r && (r = r.trim()) && "string" == typeof n && (n = n.trim()) && (t[r] = n) }), t } function y(e, t) { let r, n = i().rules, o = typeof t; return "string" === o ? r = t.split(";").map(e => e.split(":")) : null !== t && "object" === o && (r = Object.entries(t)), r && Array.from(n).forEach(t => { t.selectorText === e && r.forEach(([e, r]) => { if ("string" == typeof e && (e = e.trim()) && "string" == typeof r && (r = r.trim())) try { t.styleMap.set(e, r) } catch (t) { console.trace(`${e} => ${r}\n\t` + t.message) } }) }), r } function p(e) { let t, r = i(); for (; (t = Array.from(r.rules).findIndex(t => t.selectorText === e)) > -1;)r.deleteRule(t) } Object.defineProperty(f.prototype, "toString", { value() { let e = []; for (let t in this) v = this[t], e.push(`${t}: ${v};`); return e.join("\n") } }), Object.defineProperties(t, { all: { get: function () { return Array.from(document.styleSheets).reduce((e, t) => { for (let r of t.rules) { let { selectorText: t } = r, n = {}; for (let e of r.styleMap) { let [t, r] = e; n[t] = r.join(" ") } e[t] = n } return e }, {}) } }, set: { value: (e, r) => (t.promise.then(function () { y(e, r) }), t), enumerable: !0 }, get: { value: e => document.readyState === r ? m(e) : t.promise.then(function (t) { return m(e) }) }, delete: { value: p }, clear: { value: s }, getSheet: { value: i }, createTitle: { value: n }, getTitle: { value: o }, createElement: { value: l }, getElement: { value: u }, getRules: { value: c }, getObject: { value: m }, parseCssText: { value: d }, setMap: { value: y }, merge: { value: a }, promise: { value: new Promise(function (e, n) { if (document.readyState === r) return e(t); let o = "readystatechange"; document.addEventListener(o, function r(n) { if ("complete" === document.readyState) return a(), document.removeEventListener(o, r), e(t) }) }), enumerable: !0 } }), Object.defineProperty(e, "cssd", { value: t }) }(this);